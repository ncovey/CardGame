//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;

namespace CardGame
{
	public class CardGameManager
	{
		public enum eTurnDir
		{
			  kForward 	= 0
			, kBackward = 1
		}

		protected List<Player> m_Players = new List<Player>();
		protected StdDeck m_Deck = new StdDeck();
		protected int m_iCurrPlayer = 0;
		protected eTurnDir m_turnDir = eTurnDir.kForward;

		public List<Player> players
		{
			get { return m_Players; }
		}

		#region ctor

		public CardGameManager (int numPlayers = 2)
		{
			for (uint i = 0; i < numPlayers; i++)
				m_Players.Add(new Player());

			m_Deck.Init();

		}

		#endregion ctor

		public eTurnDir SwitchDirection()
		{
			m_turnDir = (m_turnDir == eTurnDir.kForward) ? eTurnDir.kBackward : eTurnDir.kForward;
			return m_turnDir;
		}

		public void AdvanceTurn()
		{
			switch(m_turnDir)
			{
			case eTurnDir.kForward:
				++m_iCurrPlayer;
				if (m_iCurrPlayer == m_Players.Count) // out of range
					m_iCurrPlayer = 0; // return to beginning
				break;
			case eTurnDir.kBackward:
				--m_iCurrPlayer;
				if (m_iCurrPlayer == -1) // out of range
					m_iCurrPlayer = m_Players.Count - 1; // return to end
				break;
			default:
				break;
			}
		}

		// returns null if there aren't any players
		public Player WhoseTurnIsIt()
		{
			if (m_Players.Count < 1)
				return null;
			return m_Players[m_iCurrPlayer];
		}

		void DealCardsToPlayers()
		{
			while(!m_Deck.empty())
			{
				foreach (Player p in m_Players)
				{
					p.hand.AddCard(m_Deck.DrawCard());
					if (m_Deck.empty())
						break;
				}
			}
		}

	}
}

