//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Collections;
using System.Text.RegularExpressions;
using UnityEditor;
using UnityEngine;

namespace CardGame
{
	namespace SpriteUtils
	{
		class CreateSprite : MonoBehaviour
		{
			public static Sprite CreateSpriteFromFile (string filename)
			{
				Texture2D tex = Resources.Load (filename) as Texture2D;
				Sprite newSprite = Sprite.Create (tex, new Rect (0f, 0f, tex.width, tex.height), new Vector2 (0.5f, 0.5f), 100.0f) as Sprite;
				GameObject sprGameObj = new GameObject();
				sprGameObj.name = "";
				sprGameObj.AddComponent<SpriteRenderer>();
				SpriteRenderer sprRenderer = sprGameObj.GetComponent<SpriteRenderer>();
				sprRenderer.sprite = newSprite;
				return sprRenderer.sprite;
			}

		}

		//------------------------------------------------------------------------------
		// Taken from here: http://answers.unity3d.com/questions/575521/load-unityenginesprite-from-code.html#
		//------------------------------------------------------------------------------
		public class SpriteCache
		{
			public static Dictionary<string, Sprite[]> SpriteDictionary = new Dictionary<string, Sprite[]> ();

			public static Sprite GetSpriteFromSheet (string name)
			{
				Debug.Log ("SpriteCache::GetSpriteFromSheet() : " + name);
				string query = @"((\w|-|_|\s)+/)*((\w|-|_|\s)+)(_)(\d+)$";

				Match match = Regex.Match (name, query);

				string sprName = match.Groups [3].Value;
				string sprPath = name.Remove (name.LastIndexOf ('_'));
				int sprIndex = int.Parse (match.Groups [6].Value);

				Sprite[] group;
				if (!SpriteDictionary.TryGetValue (name, out group)) {
					SpriteDictionary [name] = Resources.LoadAll<Sprite> (sprPath);
				}

				return SpriteDictionary [name] [sprIndex];
			}
		}
	}
}

